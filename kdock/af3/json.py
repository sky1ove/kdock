# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/alphafold/00_json.ipynb.

# %% auto 0
__all__ = ['dump_json', 'get_protein_json', 'read_json', 'get_protein_smiles_json', 'split_nfolder']

# %% ../../nbs/alphafold/00_json.ipynb 2
import shutil, json, pandas as pd
from pathlib import Path

# %% ../../nbs/alphafold/00_json.ipynb 4
def dump_json(data, save_path):
    "Save json data into a file"
    with open(save_path,'w') as f: 
        json.dump(data,f,indent=4)

# %% ../../nbs/alphafold/00_json.ipynb 5
def get_protein_json(name, # job name
                     seq, # aa sequence
                     save_path=None, # .json
                     seeds=[1]
                     ):
    "Generate json of single protein sequence for input of docker command"
    
    json_data = {
        "name": name,
        "modelSeeds": seeds,
        "sequences": [
            {
                "protein": {
                    "id": "A",
                    "sequence": seq,
                }
            },
        ],
        "bondedAtomPairs": [],
        "dialect": "alphafold3",
        "version": 3
    }
    if save_path:
        Path(save_path).parent.mkdir(parents=True, exist_ok=True)
        dump_json(json_data,save_path)
    return json_data

# %% ../../nbs/alphafold/00_json.ipynb 9
def read_json(file_path):
    with open(file_path,'r') as f: 
        data = json.load(f)
    return data

# %% ../../nbs/alphafold/00_json.ipynb 11
def get_protein_smiles_json(smi_id:str, 
                            SMILES:str, 
                            protein_json, # json type
                            save_path=None, # .json
                            seeds=[1]
                            ):
    
    "Get json for protein-ligand docking task"
    raw_smiles = r"{}".format(SMILES) # JSON escaping, \ to \\
    protein_index = next(i for i, item in enumerate(protein_json["sequences"]) if "protein" in item)
    json_data = {
        "name": smi_id,
        "modelSeeds": seeds,
        "sequences": [
            {
                "ligand": {
                    "id": "L",
                    "smiles": raw_smiles,
                }
            }, 
            {
                "protein": protein_json["sequences"][protein_index]["protein"]
            },
        ],
        "bondedAtomPairs": [],
        "dialect": "alphafold3",
        "version": 2
    }
    if save_path:
        Path(save_path).parent.mkdir(parents=True, exist_ok=True)
        dump_json(json_data,save_path)
    return json_data

# %% ../../nbs/alphafold/00_json.ipynb 18
def split_nfolder(folder_dir, 
                  n=4):
    "Move json files from a folder into subfolders (folder_0, folder_1, ..., folder_N)."
    
    folder_dir = Path(folder_dir)

    files = sorted(folder_dir.glob("*.json"))
    # print(len(files))
    subfolders = [folder_dir / f"folder_{i}" for i in range(n)]
    for folder in subfolders:
        folder.mkdir(exist_ok=True)

    for idx, file in enumerate(files):
        target_folder = subfolders[idx % n]
        shutil.move(str(file), target_folder / file.name)

    print(f"Distributed {len(files)} files into {n} folders.")

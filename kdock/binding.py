"""In this module, we develop tools to get the binding affinity of protein-ligand"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/gnina_docking/05_binding (2).ipynb.

# %% auto 0
__all__ = ['view_complex', 'view_mol', 'rdkit_conformer', 'gnina']

# %% ../nbs/gnina_docking/05_binding (2).ipynb 4
from rdkit import Chem
from rdkit.Chem import AllChem
import subprocess
import os
import py3Dmol
import re

# %% ../nbs/gnina_docking/05_binding (2).ipynb 15
def view_complex(receptor, # protein file
                 ligand, # ligand (green), or docked ligand
                 ori_ligand = None, #original ligand (yellow)
                ):
    v = py3Dmol.view()
    v.addModel(open(receptor).read())
    v.setStyle({'cartoon':{},'stick':{'radius':0.15}})
    
    v.addModel(open(ligand).read())
    v.setStyle({'model':1},
               {'stick':
                {'colorscheme':'greenCarbon'}
               }
              )
    
    if ori_ligand is not None:
    
        v.addModel(open(ori_ligand).read())
        v.setStyle({'model':2},
                   {'stick':
                    {'colorscheme':'yellowCarbon'}
                   })
    
    v.zoomTo({'model':1})
    v.show()

# %% ../nbs/gnina_docking/05_binding (2).ipynb 19
def view_mol(file, #sdf or pdb file
            ):
    v = py3Dmol.view()
    v.addModel(open(file).read())
    v.setStyle({'stick':{}})
    v.zoomTo()
    v.show()

# %% ../nbs/gnina_docking/05_binding (2).ipynb 25
def rdkit_conformer(SMILES, # SMILES string
                    output, # file ".sdf" to be saved
                    method='ETKDG', # Optimization method, can be 'UFF', 'MMFF' or 'ETKDGv3'
                    visualize=True, #whether or not to visualize the compound
                    seed = 3,# randomness of the 3d
                   ):
    
    np.random.seed(seed) 
    # Generate a 2D molecule from the SMILES string
    mol = Chem.MolFromSmiles(SMILES)
    
    # Generate a 3D conformation of the molecule
    AllChem.EmbedMolecule(mol)
    

    # Optimize the 3D conformation using the specified force field method
    if method == 'UFF':
        AllChem.UFFOptimizeMolecule(mol)
    elif method == 'MMFF':
        AllChem.MMFFOptimizeMolecule(mol)
    elif method == 'ETKDG':
        AllChem.EmbedMultipleConfs(mol, numConfs=1, useExpTorsionAnglePrefs=True, 
                                   useBasicKnowledge=True, enforceChirality=True,randomSeed=seed)
        AllChem.ETKDGv3()
        AllChem.UFFOptimizeMolecule(mol)
        
#     elif method == 'ETKDG_MMFF':
#         AllChem.EmbedMultipleConfs(mol, numConfs=1, useExpTorsionAnglePrefs=True, 
#                                    useBasicKnowledge=True, enforceChirality=True)
#         AllChem.ETKDGv3()
#         AllChem.MMFFOptimizeMolecule(mol)
    else:
        raise ValueError('Invalid method specified')
        

    # Remove hydrogens from the molecule
    # mol = Chem.RemoveHs(mol)
    
    # create the directory if it does not exist
    directory = os.path.dirname(os.path.abspath(output))
    os.makedirs(directory, exist_ok=True)

    # Write the molecule to an SDF file
    w = Chem.SDWriter(output)
    w.write(mol)
    w.close()
    
    if visualize:
        v = py3Dmol.view()
        v.addModel(Chem.MolToMolBlock(mol))
        v.setStyle({'stick':{}})
        v.zoomTo()
        v.show()

# %% ../nbs/gnina_docking/05_binding (2).ipynb 28
def gnina(receptor, # receptor file
          ligand, # ligand file
          autobox_ligand, # ligand file isolated from the complex
          output = 'docked.sdf', # output file (sdf or sdf.gz) to be saved
          seed=0, # set seeds
          exhaustiveness=None, # number of MC chains, default is 8 if None, the higher the better (16,32); for whole protein, use 64
         ):
    
    command = ['./gnina', 
               '-r', receptor, 
               '-l', ligand, 
               '--autobox_ligand', autobox_ligand,
               '-o', output,
               '--seed', str(seed)]

    if exhaustiveness is not None:
        command.extend(['--exhaustiveness', str(exhaustiveness)])

    # Run the command and capture the output
    result = subprocess.run(command, capture_output=True, text=True)
    
    print(f'save the docked file as {output}')
    
    values = extract_values_from_output(result.stdout)
    
    
    print(f'affinity, cnn_pose_score, and cnn_affinity are: {values}')

    # Return the command output
    return values

# %% ../nbs/gnina_docking/05_binding (2).ipynb 107
from tools.dataset import Data
from fastbook import *
from rdkit import Chem
from rdkit.Chem import AllChem, DataStructs

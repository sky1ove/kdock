"""A collection of plot functions"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/data/02_plot.ipynb.

# %% auto 0
__all__ = ['view_mol', 'view_complex', 'set_sns', 'plot_2d', 'plot_corr']

# %% ../../nbs/data/02_plot.ipynb 3
import pandas as pd, seaborn as sns
from fastcore.meta import delegates
from matplotlib import pyplot as plt

# kdock
from .core import *

# for visualization
import py3Dmol

# %% ../../nbs/data/02_plot.ipynb 5
def view_mol(file, #sdf or pdb file
            ):
    "Visualize pdb or sdf file"
    
    v = py3Dmol.view()
    v.addModel(open(file).read())
    v.setStyle({'stick':{}})
    v.zoomTo()
    v.show()

# %% ../../nbs/data/02_plot.ipynb 7
def view_complex(receptor,           # protein file
                 ligand,             # ligand (green), or docked ligand
                 ori_ligand=None,    # original ligand (yellow)
                 box=None            # optional box: [x, y, z, sizeX, sizeY, sizeZ]
                ):

    "Visualize the receptor, ligand, optional original ligand, and optional box via py3Dmol."
    v = py3Dmol.view()
    
    # Load receptor
    v.addModel(open(receptor).read())
    v.setStyle({'cartoon': {}, 'stick': {'radius': 0.15}})
    
    # Load docked ligand
    v.addModel(open(ligand).read())
    v.setStyle({'model': 1}, {'stick': {'colorscheme': 'greenCarbon'}})

    # Load original ligand if provided
    if ori_ligand is not None:
        v.addModel(open(ori_ligand).read())
        v.setStyle({'model': 2}, {'stick': {'colorscheme': 'yellowCarbon'}})

    # Add bounding box if specified
    if box is not None and len(box) == 6:
        x, y, z, sizeX, sizeY, sizeZ = box
        v.addBox({
            'center': {'x': x, 'y': y, 'z': z},
            'dimensions': {'w': sizeX, 'h': sizeY, 'd': sizeZ},
            'color': 'red',
            'opacity': 1,
            'wireframe': True
        })

    v.zoomTo({'model': 1})
    v.show()

# %% ../../nbs/data/02_plot.ipynb 11
def set_sns():
    sns.set(rc={"figure.dpi":300, 'savefig.dpi':300})
    sns.set_context('notebook')
    sns.set_style("ticks")

# %% ../../nbs/data/02_plot.ipynb 13
@delegates(sns.scatterplot)
def plot_2d(X: pd.DataFrame, # a dataframe that has first column to be x, and second column to be y
            **kwargs, # arguments for sns.scatterplot
            ):
    "Make 2D plot from a dataframe that has first column to be x, and second column to be y"
    plt.figure(figsize=(7,7))
    sns.scatterplot(data = X,x=X.columns[0],y=X.columns[1],alpha=0.7,**kwargs)

# %% ../../nbs/data/02_plot.ipynb 15
def plot_corr(x,#a column of df
              y,#a column of df
              xlabel=None,# x axis label
              ylabel=None,# y axis label
              order=3, # polynomial level, if straight, order=1 
             ):
    sns.regplot(x=x,
            y=y,
            order=order,
            line_kws={'color': 'gray'}
           )
    
    if xlabel is not None:
        plt.xlabel(xlabel)
        
    if ylabel is not None:
        plt.ylabel(ylabel)
    # plt.text(x=0.8, y=0.1, s=f'Spearman: {correlation:.2f}', transform=plt.gca().transAxes, ha='center', va='center');
